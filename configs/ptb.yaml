ptb: &ptb
   dataset: ptb
   data: data/ptb

model: &model
   d_model: 512
   n_head: 8
   d_head: 64
   d_inner: 2048
   dropout: 0.1
   dropatt: 0.1
   pre_lnorm: false
   funnel_config: "[12, (0,), 0]"
   downsample_mode: 'average'
   upsample_mode: 'average'
   activation_function: gelu
   gather_stats: ['shortened_length']
   mask_mode: 'boundary_ends_group'
   shuffle: true
   roll: true
   nw: 4
   fp16: true

# The main set of argument for boundaries is here
boundaries: &boundaries
   boundaries_type: 'noboundaries' # Here I define boundaries created in data loader
   boundary_ids: '[]' # Used if type == ids
   bp_target: [] # Here I define boundaries that can be extracted from LM objective
   fixed_sf: 0 # Used if type == constant
   n_iters: 0 # Used if bp_target is not None
   spikes_upper_perc: 100 # Used for spikes idea
   spikes_lower_perc: 0 # Used for spikes idea
   value_perc: 100 # Used for calculating boundaries from data
   group_threshold: 0.0
   spikes_step: 100
   spikes_left: 0
   spikes_right: 0

# If I want to add parameters on top of Transformer layers
# I do this using this group of params that define BP
bp: &bp
   bp_mode: 'none'
   bp_capacity: 'nonlinear'
   bp_switch_step: 0 # This means I don't use teacher forcing

# This set of params is used if and only if boundaries_type = tokenizer
tokenizer: &tokenizer
   tokenizer_type: 'spmunigram'
   tokenizer_vocab_size: 5000

eval: &eval
   eval_interval: 10000
   eval_max_steps: 500
   eval_tgt_lengths: [512]
   eval_total_lengths: [2048]
   text_generation_interval: 25000
   eval_batch_size: 16

optim: &optim
   optim: adam
   scheduler: cosine
   lr: 0.00025
   warmup_step: 4000
   clip: 0.25
   weight_decay: 0
   adam_b1: 0.9
   adam_b2: 0.999
   adam_eps: 1e-8

train: &train
   multi_gpu: ddp
   cuda: true
   max_step: 200000
   tgt_len: 2048
   batch_size: 8
   batch_chunk: 2
   log_interval: 100

default:
   train:
      <<: *ptb
      <<: *model
      <<: *bp
      <<: *tokenizer
      <<: *boundaries
      <<: *eval
      <<: *optim
      <<: *train
